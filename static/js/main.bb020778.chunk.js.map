{"version":3,"sources":["components/Form/Form.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","reportWebVitals.js","index.js","components/Form/form.module.css","components/ContactList/ContactList.module.css"],"names":["Form","onSubmit","useState","name","setName","number","setNumber","handleChange","e","target","value","resetInput","className","st","TaskEditor","preventDefault","TaskEditor_label","TaskEditor_input","type","onChange","pattern","title","placeholder","required","TaskEditor_button","ContactList","contacts","onDeleteContact","TaskList","map","id","TaskList_item","TaskList_button","onClick","Filter","App","JSON","parse","localStorage","getItem","setContacts","useEffect","window","setItem","stringify","filter","setFilter","contact","uuidv4","find","toLowerCase","alert","trim","prevContacts","sort","a","b","length","currentTarget","normalizedFilter","includes","visibleContacts","contactId","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.bb020778.chunk.js","sourcesContent":["import { useState } from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport st from './form.module.css'\r\n\r\n\r\nfunction Form({ onSubmit }) {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\nconst handleChange = e => {\r\n    const { name, value } = e.target;\r\n\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\nconst handleSubmit = e => {\r\n    e.preventDefault();\r\n    onSubmit(name, number);\r\n    resetInput();\r\n  };\r\n\r\n  const  resetInput = () => {\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n\r\n    return (\r\n      <form className={st.TaskEditor} onSubmit={handleSubmit}>\r\n        <label className={st.TaskEditor_label}>\r\n          Name\r\n          <input\r\n            className={st.TaskEditor_input}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={name}\r\n            onChange={handleChange}\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"The name can only consist of letters, apostrophes, dashes and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            placeholder=\"Ivan Pupkin\"\r\n            required\r\n          />\r\n        </label>\r\n        <label className={st.TaskEditor_label}>\r\n          Number\r\n          <input\r\n            className={st.TaskEditor_input}\r\n            type=\"text\"\r\n            name=\"number\"\r\n            value={number}\r\n            onChange={handleChange}\r\n            pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n            title=\"The phone number must be 11-12 digits long and can contain numbers, spaces, dashes, pot-bellied brackets and can start with +\"\r\n            placeholder=\"+3809873458754\"\r\n            required\r\n          />\r\n        </label>\r\n        <button className={st.TaskEditor_button} type=\"submit\">\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n\r\n\r\nForm.propTypes = {\r\n  \r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\nexport default Form;","import PropTypes from \"prop-types\";\r\nimport st from \"./ContactList.module.css\";\r\n\r\nconst ContactList = ({ contacts, onDeleteContact }) => (\r\n  <ul className={st.TaskList}>\r\n    {contacts.map(({id, name, number} ) => (\r\n      <li className = {st.TaskList_item}key={id}>\r\n          <p>\r\n            <b>{name}</b>\r\n            <em>{number}</em>\r\n          </p>\r\n        \r\n          <button\r\n            className={st.TaskList_button}\r\n            type=\"button\"\r\n            onClick={() => onDeleteContact(id)}\r\n          >\r\n            delete\r\n          </button>\r\n        \r\n      </li>\r\n    ))}\r\n  </ul>\r\n);\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactList;","\r\n\r\n\r\nimport { PropTypes } from \"prop-types\";\r\n\r\nfunction Filter({ value, onChange }) {\r\n  return (\r\n    <label >\r\n      Find contacts by name\r\n      <input\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={onChange}\r\n      />\r\n    </label>\r\n  );\r\n}\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;","import { useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from \"uuid\";\nimport Form from './components/Form/Form'\nimport ContactList from './components/ContactList/ContactList'\nimport Filter from './components/Filter/Filter.js'\n\n\n\nfunction App() {\n  const [contacts, setContacts] = useState(() => {\n    return JSON.parse(localStorage.getItem('contacts')) ?? [];\n  });\n\n  useEffect(() => {\n    window.localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n  const [filter, setFilter] = useState('');\n\n   const addContact = (name, number) => {\n    const contact = {\n      id: uuidv4(),\n      name,\n      number,\n    };\n  \n      if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === name.toLowerCase(),\n      )\n    ) {\n      alert(`${name} is already in contacts`);\n    } else if (contacts.find(contact => contact.number === number)) {\n      alert(`🤔 ${number} is already in contacts.`);\n    } else if (name.trim() === '' || number.trim() === '') {\n      alert(\"😱 Enter the contact's name and number phone!\");\n    } else {\n      setContacts(prevContacts =>\n        [contact, ...prevContacts].sort((a, b) => {\n          if (a.name.toLowerCase() > b.name.toLowerCase()) return 1;\n          if (a.name.toLowerCase() < b.name.toLowerCase()) return -1;\n          return 0;\n        }),\n      );\n    }\n  };\n\n\n\n     \n\n  \n  const deleteContact = contactId => {\n    setContacts(contacts.filter(({ id }) => id !== contactId));\n  };\n\n  const filterHandler = e => {\n    setFilter(e.currentTarget.value);\n  };\n\n  const visibleContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n\n      <Form onSubmit={addContact} />\n      <h2>Contacts</h2>\n      {contacts.length > 1 && <Filter value={filter} onChange={filterHandler} />}\n      {contacts.length > 0 ? (\n        <ContactList\n          contacts={visibleContacts()}\n          onDeleteContact={deleteContact}\n        />\n      ) : (\n        <p>Your phonebook is empty. Please add contact.</p>\n      )}\n    </div>\n  );\n\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TaskEditor\":\"form_TaskEditor__7Vzwf\",\"TaskEditor_label\":\"form_TaskEditor_label__2mvYt\",\"TaskEditor_input\":\"form_TaskEditor_input__3iy2o\",\"TaskEditorinput\":\"form_TaskEditorinput__267CZ\",\"TaskEditor_button\":\"form_TaskEditor_button__2AZxh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TaskList\":\"ContactList_TaskList__1cTwq\",\"TaskList_item\":\"ContactList_TaskList_item__3wjUr\",\"completed\":\"ContactList_completed__FUrcn\",\"TaskList_text\":\"ContactList_TaskList_text__18neE\",\"TaskList_actions\":\"ContactList_TaskList_actions__1MtCU\",\"TaskList_button\":\"ContactList_TaskList_button__24TIP\"};"],"sourceRoot":""}